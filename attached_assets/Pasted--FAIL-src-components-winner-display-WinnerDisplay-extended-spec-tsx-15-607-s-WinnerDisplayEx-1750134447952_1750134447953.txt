 FAIL  src/components/winner-display/WinnerDisplay.extended.spec.tsx (15.607 s)
  ● WinnerDisplayExtended › renders the winner text correctly

    TestingLibraryElementError: Unable to find an element with the text: Dead Unicorn Wins!. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    <body>
      <div>
        <section
          class="css-t1hd5h"
        >
          <p
            class="MuiTypography-root MuiTypography-body1 css-v22e6a-MuiTypography-root"
          >
            Dead Unicorn Wins!
             wins!
          </p>
        </section>
      </div>
    </body>

      10 |     render(<WinnerDisplay text={winnerText} />);
      11 |
    > 12 |     const winnerElement = screen.getByText(winnerText);
         |                                  ^
      13 |     expect(winnerElement).toBeInTheDocument();
      14 |   });
      15 |

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:40:19)
      at getElementError (node_modules/@testing-library/dom/dist/query-helpers.js:90:38)
      at allQuery (node_modules/@testing-library/dom/dist/query-helpers.js:62:17)
      at query (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/winner-display/WinnerDisplay.extended.spec.tsx:12:34)

  ● WinnerDisplayExtended › renders empty text when no winner text is provided

    expect(element).toHaveTextContent()

    Checking with empty string will always match, use .toBeEmptyDOMElement() instead:

    Received:
      wins!

      19 |     const textElement = container.querySelector('.MuiTypography-root');
      20 |     expect(textElement).toBeInTheDocument();
    > 21 |     expect(textElement).toHaveTextContent('');
         |                         ^
      22 |   });
      23 |
      24 |   it('renders tie message correctly', () => {

      at Object.<anonymous> (src/components/winner-display/WinnerDisplay.extended.spec.tsx:21:25)

  ● WinnerDisplayExtended › renders tie message correctly

    TestingLibraryElementError: Unable to find an element with the text: It's a tie!. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    <body>
      <div>
        <section
          class="css-t1hd5h"
        >
          <p
            class="MuiTypography-root MuiTypography-body1 css-v22e6a-MuiTypography-root"
          >
            It's a tie!
             wins!
          </p>
        </section>
      </div>
    </body>

      26 |     render(<WinnerDisplay text={tieText} />);
      27 |
    > 28 |     const tieElement = screen.getByText(tieText);
         |                               ^
      29 |     expect(tieElement).toBeInTheDocument();
      30 |   });
      31 |

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:40:19)
      at getElementError (node_modules/@testing-library/dom/dist/query-helpers.js:90:38)
      at allQuery (node_modules/@testing-library/dom/dist/query-helpers.js:62:17)
      at query (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/winner-display/WinnerDisplay.extended.spec.tsx:28:31)

  ● WinnerDisplayExtended › applies correct styling to the winner text

    TestingLibraryElementError: Unable to find an element with the text: Red Dragon Wins!. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    <body>
      <div>
        <section
          class="css-t1hd5h"
        >
          <p
            class="MuiTypography-root MuiTypography-body1 css-v22e6a-MuiTypography-root"
          >
            Red Dragon Wins!
             wins!
          </p>
        </section>
      </div>
    </body>

      34 |     render(<WinnerDisplay text={winnerText} />);
      35 |
    > 36 |     const winnerElement = screen.getByText(winnerText);
         |                                  ^
      37 |     expect(winnerElement).toHaveClass('MuiTypography-root');
      38 |   });
      39 | });

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:40:19)
      at getElementError (node_modules/@testing-library/dom/dist/query-helpers.js:90:38)
      at allQuery (node_modules/@testing-library/dom/dist/query-helpers.js:62:17)
      at query (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/winner-display/WinnerDisplay.extended.spec.tsx:36:34)
